The general form of memory address references is this:

	ADDRES_OR_OFFSET(%BASE_OR_OFFSET,%INDEX,MULTIPLYER)

All of the fields are optional.
Calculation to calculate the addres:

	FINAL_ADDRESS = ADDRESS_OR_OFFSET + %BASE_OR_OFFSET + MULTIPLYER + %INDEX

ADDRESS_OR_OFFSET and MULTIPLYER must be constants. Other two - registers.
If any of the pieces are left out - they are substituted with zero in equation.


DIRECT ADDRESSING MODE:

	This is done using the ADDRESS_OR_OFFSET portion:

	movl ADDRESS, %register

	This load the register %register with the value at address ADDRESS.


INDEXED ADDRESSING MODE:

	This is done by using ADDRESS_OR_OFFSET and INDEX portions.
	Any general-purpose register might be use as INDEX.
	You can also have a constant multiplyer of 1,2 and 4.

	To access the third byte from a string of bytes, you will write something like this:

		movl string_start(,%ecx,1), %eax

	This starts at string_start and adds 1 * %ecx and loads this value to %eax.


INDIRECT ADDRESSING MODE:

	Indirect addressing mode loads a value from the address indicated by a register.
	If %eax held an address and we wanted to move value at that address to %ebx, we could write something like this:

		movl (%eax), %ebx


BASE POINTER ADDRESSING MODE:

	Similar to indirect addressing mode, but you can also add a constant value to the address in the register.

		movl 4(%eax), %ebx


IMMEDIATE MODE:

	In an immediate mode you load direct values into registers or memory locations:

		movl $12, %eax


REGISTER ADDRESSING MODE:

	Register addressing mode simply moves data in or out of a register. In all of the examples above
		register addressing mode was used on the other operand.

